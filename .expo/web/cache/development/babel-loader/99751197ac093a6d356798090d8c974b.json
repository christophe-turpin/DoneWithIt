{"ast":null,"code":"'use strict';\n\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nvar CACHE_PREFIX = 'cachestore-';\nvar CACHE_EXPIRATION_PREFIX = 'cacheexpiration-';\nvar EXPIRY_UNITS = 60 * 1000;\n\nfunction currentTime() {\n  return Math.floor(new Date().getTime() / EXPIRY_UNITS);\n}\n\n;\nvar CacheStore = {\n  get: function get(key) {\n    var theKey = CACHE_PREFIX + key;\n    var exprKey = CACHE_EXPIRATION_PREFIX + key;\n    return AsyncStorage.getItem(exprKey).then(function (expiry) {\n      if (expiry && currentTime() >= parseInt(expiry, 10)) {\n        AsyncStorage.multiRemove([exprKey, theKey]);\n        return new Promise.reject(null);\n      }\n\n      return AsyncStorage.getItem(theKey).then(function (item) {\n        return Promise.resolve(JSON.parse(item));\n      });\n    });\n  },\n  set: function set(key, value, time) {\n    var theKey = CACHE_PREFIX + key;\n    var exprKey = CACHE_EXPIRATION_PREFIX + key;\n\n    if (time) {\n      return AsyncStorage.setItem(exprKey, (currentTime() + time).toString()).then(function () {\n        return AsyncStorage.setItem(theKey, JSON.stringify(value));\n      });\n    } else {\n      AsyncStorage.removeItem(exprKey);\n      return AsyncStorage.setItem(theKey, JSON.stringify(value));\n    }\n  },\n  remove: function remove(key) {\n    return AsyncStorage.multiRemove([CACHE_EXPIRATION_PREFIX + key, CACHE_PREFIX + key]);\n  },\n  isExpired: function isExpired(key) {\n    var exprKey = CACHE_EXPIRATION_PREFIX + key;\n    return AsyncStorage.getItem(exprKey).then(function (expiry) {\n      var expired = expiry && currentTime() >= parseInt(expiry, 10);\n      return expired ? Promise.resolve() : new Promise.reject(null);\n    });\n  },\n  flush: function flush() {\n    return AsyncStorage.getAllKeys().then(function (keys) {\n      var theKeys = keys.filter(function (key) {\n        return key.indexOf(CACHE_PREFIX) == 0 || key.indexOf(CACHE_EXPIRATION_PREFIX) == 0;\n      });\n      return AsyncStorage.multiRemove(theKeys);\n    });\n  },\n  flushExpired: function flushExpired() {\n    return AsyncStorage.getAllKeys().then(function (keys) {\n      keys.forEach(function (key) {\n        if (key.indexOf(CACHE_EXPIRATION_PREFIX) == 0) {\n          var exprKey = key;\n          return AsyncStorage.getItem(exprKey).then(function (expiry) {\n            if (expiry && currentTime() >= parseInt(expiry, 10)) {\n              var theKey = CACHE_PREFIX + key.replace(CACHE_EXPIRATION_PREFIX, '');\n              return AsyncStorage.multiRemove([exprKey, theKey]);\n            }\n\n            return Promise.resolve();\n          });\n        }\n\n        return Promise.resolve();\n      });\n    });\n  }\n};\nCacheStore.flushExpired();\nexport default CacheStore;","map":{"version":3,"sources":["/home/christophe/workspace/ReactNative/DoneWithIt/node_modules/react-native-cache-store/index.js"],"names":["AsyncStorage","CACHE_PREFIX","CACHE_EXPIRATION_PREFIX","EXPIRY_UNITS","currentTime","Math","floor","Date","getTime","CacheStore","get","key","theKey","exprKey","getItem","then","expiry","parseInt","multiRemove","Promise","reject","item","resolve","JSON","parse","set","value","time","setItem","toString","stringify","removeItem","remove","isExpired","expired","flush","getAllKeys","keys","theKeys","filter","indexOf","flushExpired","forEach","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { AsyncStorage } from 'react-native';\n\n// Inspired by lscache https://github.com/pamelafox/lscache\n\nconst CACHE_PREFIX = 'cachestore-';\nconst CACHE_EXPIRATION_PREFIX = 'cacheexpiration-';\nconst EXPIRY_UNITS = 60 * 1000; // Time resolution in minutes\n\nfunction currentTime(){\n  return Math.floor((new Date().getTime())/EXPIRY_UNITS);\n};\n\nconst CacheStore = {\n  get(key){\n    const theKey = CACHE_PREFIX + key;\n    const exprKey = CACHE_EXPIRATION_PREFIX + key;\n    return AsyncStorage.getItem(exprKey).then((expiry) => {\n      if (expiry && currentTime() >= parseInt(expiry, 10)){\n        AsyncStorage.multiRemove([exprKey, theKey]);\n        return new Promise.reject(null);\n      }\n      return AsyncStorage.getItem(theKey).then((item) => {\n        return Promise.resolve(JSON.parse(item));\n      });\n    });\n  },\n\n  set(key, value, time){\n    const theKey = CACHE_PREFIX + key;\n    const exprKey = CACHE_EXPIRATION_PREFIX + key;\n    if (time){\n      return AsyncStorage.setItem(exprKey, (currentTime() + time).toString()).then(() => {\n        return AsyncStorage.setItem(theKey, JSON.stringify(value));\n      });\n    } else {\n      AsyncStorage.removeItem(exprKey);\n      return AsyncStorage.setItem(theKey, JSON.stringify(value));\n    }\n  },\n\n  remove(key){\n    return AsyncStorage.multiRemove([CACHE_EXPIRATION_PREFIX + key, CACHE_PREFIX + key]);\n  },\n\n  isExpired(key){\n    const exprKey = CACHE_EXPIRATION_PREFIX + key;\n    return AsyncStorage.getItem(exprKey).then((expiry) => {\n      var expired = expiry && currentTime() >= parseInt(expiry, 10);\n      return expired ? Promise.resolve() : new Promise.reject(null);\n    });\n  },\n\n  flush(){\n    return AsyncStorage.getAllKeys().then((keys) => {\n      var theKeys = keys.filter((key) => {\n        return key.indexOf(CACHE_PREFIX) == 0 || key.indexOf(CACHE_EXPIRATION_PREFIX) == 0;\n      });\n      return AsyncStorage.multiRemove(theKeys);\n    });\n  },\n\n  flushExpired(){\n    return AsyncStorage.getAllKeys().then((keys) => {\n      keys.forEach((key) => {\n        if (key.indexOf(CACHE_EXPIRATION_PREFIX) == 0){\n          var exprKey = key;\n          return AsyncStorage.getItem(exprKey).then((expiry) => {\n            if (expiry && currentTime() >= parseInt(expiry, 10)){\n              var theKey = CACHE_PREFIX + key.replace(CACHE_EXPIRATION_PREFIX, '');\n              return AsyncStorage.multiRemove([exprKey, theKey]);\n            }\n            return Promise.resolve();\n          });\n        }\n        return Promise.resolve();\n      });\n    });\n  }\n};\n\n// Always flush expired items on start time\nCacheStore.flushExpired();\n\nexport default CacheStore;\n"]},"metadata":{},"sourceType":"module"}